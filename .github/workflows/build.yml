name: Build

on:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        
      - name: Install the Apple development certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPMENT }}
          P12_PASSWORD: ${{ secrets.APPLE_DEVELOPMENT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.DEVELOPMENT_MOBILEPROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.MOBILEPROVISION_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install the Apple distribution certificate and provisioning profile
        env:
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION }}
          P12_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_PASSWORD }}
          DISTRIBUTION_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_MOBILEPROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.MOBILEPROVISION_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
          PP_PATH=$RUNNER_TEMP/distribution_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Import certificate into keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install jq (macOS)
        run: brew install jq
          
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.22.2'

      - name: Verify Flutter installation
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Create key
        run: echo "${{ secrets.API_KEY }}" > assets/key.json

      - name: iOS pod clean and installation
        run: cd ios; rm Podfile.lock; rm -rf Pods; pod install

      # - name: Run Flutter tests
      #   run: flutter test
      
      - name: Flutter build iOS
        run: flutter build ipa --release

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath ./build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ./ios/ExportOptions.plist \
            -exportPath ./build/ios/ipa

      - name: Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f ./build/ios/ipa/camping.ipa \
            -u "$APPLE_ID" \
            -p "$APPLE_APP_SPECIFIC_PASSWORD" \
            --type ios
        
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/distribution_pp.mobileprovision

      - name: Remove existing IPA file
        run: |
          rm -f ./build/ios/ipa/camping.ipa

